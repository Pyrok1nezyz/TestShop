@page "/shoppingcart"
@using TestShop.Entitys
@inject IHttpContextAccessor HttpContextAccessor
@inject IHttpClientFactory ClientFactory

<section class="h-100 bg-light rounded-2">
    <div class="container h-100 py-5" style="padding-right: unset; padding-left: unset;">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-10">

	            <div class="d-flex justify-content-between align-items-center mb-4">
		            <h3 class="fw-normal mb-0 text-black">Корзина товаров</h3>
	            </div>
	            @if (Cart != null)
	            {
		            @if (Cart.ListItems != null)
		            {
			            @foreach (var itemCounter in Cart.ListItems)
			            {
				            var id = itemCounter.Item.Id;

				            <div class="card rounded-3 mb-4">
					            <div class="card-body p-4">
						            <div class="row d-flex justify-content-between align-items-center">
							            <div class="col-md-2 col-lg-2 col-xl-2">
								            <img src="@itemCounter.Item.ImageString"
								                 class="img-fluid rounded-3">
							            </div>

							            <div class="col-md-3 col-lg-3 col-xl-3">
								            <p class="lead fw-normal mb-2">@itemCounter.Item.Name</p>
							            </div>

							            <div class="col-md-3 col-lg-3 col-xl-2 d-grid">
								            <button class="btn btn-link px-2" @onclick="() => { DecreeseItemsCount(id); }">
									            <i class="fas fa-minus">-</i>
								            </button>

								            <input id="form1" min="0" name="quantity" value="@itemCounter.Count" type="number"
								                   class="form-control form-control-sm" />

								            <button class="btn btn-link px-2" @onclick="() => { IncreesItemsCount(id); }">
									            <i class="fas fa-plus">+</i>
								            </button>
							            </div>

							            <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
								            <h5 class="mb-0">@itemCounter.Item.Price руб.</h5>
							            </div>

							            <div class="col-md-1 col-lg-1 col-xl-1 text-end">
								            <a @onclick="() => { DeleteItemFromCart(id); }" class="text-danger"><i class="fas fa-trash fa-lg"></i></a>
							            </div>
						            </div>
					            </div>
				            </div>
			            }
				
			            <div class="card flex-fill">
				            <div class="card-body d-grid">
								<button @onclick="Callback" type="button" class="btn btn-warning btn-block btn-lg">Сохранить</button>
				            </div>
			            </div>
		            }
		            else
		            {
			            <h2 class="pb-2 text-black">Корзина товаров пуста!</h2>
		            }
	            }
	            else
	            {
		            <h2 class="pb-2 text-black">Корзина товаров пуста!</h2>
	            }
            </div>
        </div>
    </div>
</section>

@code {

	[Parameter]
	[SupplyParameterFromQuery(Name = "newitem")]
	public int id { get; set; }

	CustomerShoppingCart Cart;
	HttpClient _client;

	protected override void OnInitialized()
	{
		string query = "";
		Guid userGuid = Guid.NewGuid();
		var context = HttpContextAccessor.HttpContext;
		_client = ClientFactory.CreateClient();

		context.Request.Cookies.TryGetValue("guid", out query);
		var isParsed = Guid.TryParse(query, out userGuid);

		if (isParsed)
		{
			var newcart = GetShoppingCart(userGuid);
			if (newcart != null)
			{
				Cart = newcart;
				PutShoppingCart();
				return;
			}
		}
	}

	private void DecreeseItemsCount(int id)
	{
		var itemCounter = Cart.ListItems.Find(e => e.Item.Id == id);
		if (itemCounter.Count > 0) itemCounter.Count--;
	} 

	private void IncreesItemsCount(int id)
	{
		var itemCounter = Cart.ListItems.Find(e => e.Item.Id == id);
		if (itemCounter.Count > 0) itemCounter.Count++;
	}

	private CustomerShoppingCart GetShoppingCart(Guid guid)
	{
		var response = _client.GetAsync($"https://localhost:7273/cart?id={guid}").Result;

		if (response.IsSuccessStatusCode)
		{
			var content = response.Content.ReadFromJsonAsync<CustomerShoppingCart>().Result;
			return content;
		}

		return null;

	}

	private void PutShoppingCart()
	{
		Cart.LastCheck = DateTime.Now;
		var jsoncontent = JsonContent.Create(Cart);
		_client.PutAsync("https://localhost:7273/cart", jsoncontent);
	}

	private void DeleteItemFromCart(int id)
	{
		var item = Cart.ListItems.Find(e => e.Item.Id == id);
		Cart.ListItems.Remove(item);
	}

	private void Callback()
	{
		PutShoppingCart();
	}
}

